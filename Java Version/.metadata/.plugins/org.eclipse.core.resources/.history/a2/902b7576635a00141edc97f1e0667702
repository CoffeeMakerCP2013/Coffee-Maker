package test;

import junit.framework.Assert;

import m4coffeemaker.M4ContainmentVessel;
import m4coffeemaker.M4HotWaterSource;
import m4coffeemaker.M4UserInterface;

import org.junit.Before;
import org.junit.Test;

//@TestFixture
public class TestCoffeeMaker {
	private M4UserInterface ui;
	private M4HotWaterSource hws;
	private M4ContainmentVessel cv;
	private CoffeeMakerStub api;

	@Before
	public void SetUp() {
		api = new CoffeeMakerStub();
		ui = new M4UserInterface(api);
		hws = new M4HotWaterSource(api);
		cv = new M4ContainmentVessel(api);
		ui.Init(hws, cv);
		hws.Init(ui, cv);
		cv.Init(ui, hws);
	}

	private void Poll() {
		ui.Poll();
		hws.Poll();
		cv.Poll();
	}

	@Test
	public void initialConditions() {
		Poll();
		Assert.assertFalse(api.boilerOn);
		Assert.assertFalse(api.lightOn);
		Assert.assertFalse(api.plateOn);
		Assert.assertTrue(api.valveClosed);

	}

	@Test
	public void startNoPot() {
		Poll();
		api.buttonPressed = true;
		api.potPresent = false;
		Poll();
		Assert.assertFalse(api.boilerOn);
		Assert.assertFalse(api.lightOn);
		Assert.assertFalse(api.plateOn);
		Assert.assertTrue(api.valveClosed);
	}

	@Test
	public void startNoWater() {
		Poll();
		api.buttonPressed = true;
		api.boilerEmpty = true;
		Poll();
		Assert.assertFalse(api.boilerOn);
		Assert.assertFalse(api.lightOn);
		Assert.assertFalse(api.plateOn);
		Assert.assertTrue(api.valveClosed);
	}

	@Test
	public void goodStart() {
		normalStart();
		Assert.assertTrue(api.boilerOn);
		Assert.assertFalse(api.lightOn);
		Assert.assertFalse(api.plateOn);
		Assert.assertTrue(api.valveClosed);
	}

	private void normalStart() {
		Poll();
		api.boilerEmpty = false;
		api.buttonPressed = true;
		Poll();
	}

	@Test
	public void startedPotNotEmpty() {
		normalStart();
		api.potNotEmpty = true;
		Poll();
		Assert.assertTrue(api.boilerOn);
		Assert.assertFalse(api.lightOn);
		Assert.assertTrue(api.plateOn);
		Assert.assertTrue(api.valveClosed);
	}

	@Test
	public void potRemovedAndReplacedWhileEmpty() {
		normalStart();
		api.potPresent = false;
		Poll();
		Assert.assertFalse(api.boilerOn);
		Assert.assertFalse(api.lightOn);
		Assert.assertFalse(api.plateOn);
		Assert.assertFalse(api.valveClosed);
		api.potPresent = true;
		Poll();
		Assert.assertTrue(api.boilerOn);
		Assert.assertFalse(api.lightOn);
		Assert.assertFalse(api.plateOn);
		Assert.assertTrue(api.valveClosed);
	}

	@Test
	public void potRemovedWhileNotEmptyAndReplacedEmpty() {
		normalFill();
		api.potPresent = false;
		Poll();
		Assert.assertFalse(api.boilerOn);
		Assert.assertFalse(api.lightOn);
		Assert.assertFalse(api.plateOn);
		Assert.assertFalse(api.valveClosed);
		api.potPresent = true;
		api.potNotEmpty = false;
		Poll();
		Assert.assertTrue(api.boilerOn);
		Assert.assertFalse(api.lightOn);
		Assert.assertFalse(api.plateOn);
		Assert.assertTrue(api.valveClosed);
	}

	private void normalFill() {
		normalStart();
		api.potNotEmpty = true;
		Poll();
	}

	@Test
	public void potRemovedWhileNotEmptyAndReplacedNotEmpty() {
		normalFill();
		api.potPresent = false;
		Poll();
		api.potPresent = true;
		Poll();
		Assert.assertTrue(api.boilerOn);
		Assert.assertFalse(api.lightOn);
		Assert.assertTrue(api.plateOn);
		Assert.assertTrue(api.valveClosed);
	}

	@Test
	public void boilerEmptyPotNotEmpty() {
		normalBrew();
		Assert.assertFalse(api.boilerOn);
		Assert.assertTrue(api.lightOn);
		Assert.assertTrue(api.plateOn);
		Assert.assertTrue(api.valveClosed);
	}

	private void normalBrew() {
		normalFill();
		api.boilerEmpty = true;
		Poll();
	}

	@Test
	public void boilerEmptiesWhilePotRemoved() {
		normalFill();
		api.potPresent = false;
		Poll();
		api.boilerEmpty = true;
		Poll();
		Assert.assertFalse(api.boilerOn);
		Assert.assertTrue(api.lightOn);
		Assert.assertFalse(api.plateOn);
		Assert.assertTrue(api.valveClosed);
		api.potPresent = true;
		Poll();
		Assert.assertFalse(api.boilerOn);
		Assert.assertTrue(api.lightOn);
		Assert.assertTrue(api.plateOn);
		Assert.assertTrue(api.valveClosed);
	}

	@Test
	public void emptyPotReturnedAfter() {
		normalBrew();
		api.potNotEmpty = false;
		Poll();
		Assert.assertFalse(api.boilerOn);
		Assert.assertFalse(api.lightOn);
		Assert.assertFalse(api.plateOn);
		Assert.assertTrue(api.valveClosed);
	}
}
