package m4coffeemaker;

import model.CoffeeMachineStates.*;

import coffeemaker.CoffeeMakerAPI;
import coffeemaker.ContainmentVessel;

public class M4ContainmentVessel extends ContainmentVessel implements Pollable {
	private CoffeeMakerAPI api;
	private WarmerPlateStatus lastPotStatus;
	public M4ContainmentVessel(CoffeeMakerAPI api) {
		this.api = api;
		lastPotStatus = WarmerPlateStatus.POT_EMPTY;
	}
	@Override
	public Boolean IsReady() {
		WarmerPlateStatus plateStatus = api.getWarmerPlateStatus();
		return plateStatus == WarmerPlateStatus.POT_EMPTY;
	}
	public void Poll() {
		WarmerPlateStatus potStatus = api.getWarmerPlateStatus();
		if (potStatus != lastPotStatus) {
			if (isBrewing) {
				HandleBrewingEvent(potStatus);
			}
			else if (isComplete == false) {
				HandleIncompleteEvent(potStatus);
			}
			lastPotStatus = potStatus;
		}
	}
	private void HandleBrewingEvent(WarmerPlateStatus potStatus) {
		if (potStatus == WarmerPlateStatus.POT_NOT_EMPTY) {
			ContainerAvailable();
			api.SetWarmerState(WarmerState.ON);
		}
		else if (potStatus == WarmerPlateStatus.WARMER_EMPTY) {
			ContainerUnavailable();
			api.SetWarmerState(WarmerState.OFF);
		}
		else { // potStatus == POT_EMPTY
			ContainerAvailable();
			api.SetWarmerState(WarmerState.OFF);
		}
	}
	private void HandleIncompleteEvent(WarmerPlateStatus potStatus) {
		if (potStatus == WarmerPlateStatus.POT_NOT_EMPTY) {
			api.SetWarmerState(WarmerState.ON);
		}
		else if (potStatus == WarmerPlateStatus.WARMER_EMPTY) {
			api.SetWarmerState(WarmerState.OFF);
		}
		else { // potStatus == POT_EMPTY
			api.SetWarmerState(WarmerState.OFF);
			DeclareComplete();
		}
	}

}